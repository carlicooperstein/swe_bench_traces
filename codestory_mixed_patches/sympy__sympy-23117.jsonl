{
    "instance_id": "sympy__sympy-23117",
    "model_name_or_path": "codestory-mixed",
    "model_patch": "diff --git a/sympy/tensor/array/dense_ndim_array.py b/sympy/tensor/array/dense_ndim_array.py\nindex 6019daf787..28f2b41ca1 100644\n--- a/sympy/tensor/array/dense_ndim_array.py\n+++ b/sympy/tensor/array/dense_ndim_array.py\n@@ -15,6 +15,8 @@ class DenseNDimArray(NDimArray):\n     _array: List[Basic]\n \n     def __new__(self, *args, **kwargs):\n+        if len(args) > 0 and isinstance(args[0], (list, tuple)) and len(args[0]) == 0:\n+            return ImmutableDenseNDimArray([], (0,))\n         return ImmutableDenseNDimArray(*args, **kwargs)\n \n     @property\n@@ -71,6 +73,8 @@ def __getitem__(self, index):\n \n     @classmethod\n     def zeros(cls, *shape):\n+        if not shape:\n+            return cls._new([], (0,))\n         list_length = functools.reduce(lambda x, y: x*y, shape, S.One)\n         return cls._new(([0]*list_length,), shape)\n \ndiff --git a/sympy/tensor/array/ndim_array.py b/sympy/tensor/array/ndim_array.py\nindex 6490a655a4..bbfb262c91 100644\n--- a/sympy/tensor/array/ndim_array.py\n+++ b/sympy/tensor/array/ndim_array.py\n@@ -193,7 +193,10 @@ def _scan_iterable_shape(cls, iterable):\n         def f(pointer):\n             if not isinstance(pointer, Iterable):\n                 return [pointer], ()\n-\n+            \n+            if not pointer:  # Check if the pointer is empty\n+                return [], (0,)\n+            \n             result = []\n             elems, shapes = zip(*[f(i) for i in pointer])\n             if len(set(shapes)) != 1:\n",
    "resolved": true
}