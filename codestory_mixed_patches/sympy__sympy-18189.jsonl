{
    "instance_id": "sympy__sympy-18189",
    "model_name_or_path": "codestory-mixed",
    "model_patch": "diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\nindex 6092e35dab..d5e658e1b4 100644\n--- a/sympy/solvers/diophantine.py\n+++ b/sympy/solvers/diophantine.py\n@@ -182,7 +182,7 @@ def diophantine(eq, param=symbols(\"t\", integer=True), syms=None,\n             if syms != var:\n                 dict_sym_index = dict(zip(syms, range(len(syms))))\n                 return {tuple([t[dict_sym_index[i]] for i in var])\n-                            for t in diophantine(eq, param)}\n+                    for t in diophantine(eq, param, permute=permute)}\n         n, d = eq.as_numer_denom()\n         if n.is_number:\n             return set()\ndiff --git a/sympy/utilities/iterables.py b/sympy/utilities/iterables.py\nindex b423973dda..a1d0590d05 100644\n--- a/sympy/utilities/iterables.py\n+++ b/sympy/utilities/iterables.py\n@@ -2607,14 +2607,18 @@ def permute_signs(t):\n     >>> list(permute_signs((0, 1, 2)))\n     [(0, 1, 2), (0, -1, 2), (0, 1, -2), (0, -1, -2)]\n     \"\"\"\n-    for signs in cartes(*[(1, -1)]*(len(t) - t.count(0))):\n-        signs = list(signs)\n-        yield type(t)([i*signs.pop() if i else i for i in t])\n+    non_zero_indices = [i for i, x in enumerate(t) if x != 0]\n+    for signs in cartes(*[(1, -1)]*len(non_zero_indices)):\n+        result = list(t)\n+        for i, sign in zip(non_zero_indices, signs):\n+            result[i] *= sign\n+        yield type(t)(result)\n \n \n def signed_permutations(t):\n     \"\"\"Return iterator in which the signs of non-zero elements\n-    of t and the order of the elements are permuted.\n+    of t and the order of the elements are permuted, preserving\n+    the original order of symbols.\n \n     Examples\n     ========\n@@ -2627,8 +2631,11 @@ def signed_permutations(t):\n     (-1, -2, 0), (2, 0, 1), (-2, 0, 1), (2, 0, -1), (-2, 0, -1),\n     (2, 1, 0), (-2, 1, 0), (2, -1, 0), (-2, -1, 0)]\n     \"\"\"\n-    return (type(t)(i) for j in permutations(t)\n-        for i in permute_signs(j))\n+    indices = range(len(t))\n+    for perm in permutations(indices):\n+        perm_t = type(t)(t[i] for i in perm)\n+        for signed_perm in permute_signs(perm_t):\n+            yield signed_perm\n \n \n def rotations(s, dir=1):\n",
    "resolved": true
}