{
    "instance_id": "scikit-learn__scikit-learn-13779",
    "model_name_or_path": "codestory-mixed",
    "model_patch": "diff --git a/sklearn/base.py b/sklearn/base.py\nindex c4eb14aec..4bc0a00aa 100644\n--- a/sklearn/base.py\n+++ b/sklearn/base.py\n@@ -230,6 +230,8 @@ class BaseEstimator:\n                 valid_params[key] = value\n \n         for key, sub_params in nested_params.items():\n+            if valid_params[key] is None:\n+                raise ValueError(f\"Cannot set nested parameter for None estimator '{key}'.\")\n             valid_params[key].set_params(**sub_params)\n \n         return self\ndiff --git a/sklearn/ensemble/voting.py b/sklearn/ensemble/voting.py\nindex 7afa7180c..b4300471e 100644\n--- a/sklearn/ensemble/voting.py\n+++ b/sklearn/ensemble/voting.py\n@@ -29,6 +29,8 @@ from ..utils import Bunch\n \n def _parallel_fit_estimator(estimator, X, y, sample_weight=None):\n     \"\"\"Private function used to fit an estimator within a job.\"\"\"\n+    if estimator is None:\n+        return None\n     if sample_weight is not None:\n         estimator.fit(X, y, sample_weight=sample_weight)\n     else:\n@@ -53,8 +55,7 @@ class _BaseVoting(_BaseComposition, TransformerMixin):\n         \"\"\"Get the weights of not `None` estimators\"\"\"\n         if self.weights is None:\n             return None\n-        return [w for est, w in zip(self.estimators,\n-                                    self.weights) if est[1] is not None]\n+        return [w for (est_name, est), w in zip(self.estimators, self.weights) if est is not None]\n \n     def _predict(self, X):\n         \"\"\"Collect results from clf.predict calls. \"\"\"\n@@ -78,7 +79,7 @@ class _BaseVoting(_BaseComposition, TransformerMixin):\n \n         if sample_weight is not None:\n             for name, step in self.estimators:\n-                if not has_fit_parameter(step, 'sample_weight'):\n+                if step is not None and not has_fit_parameter(step, 'sample_weight'):\n                     raise ValueError('Underlying estimator \\'%s\\' does not'\n                                      ' support sample weights.' % name)\n \n@@ -90,14 +91,23 @@ class _BaseVoting(_BaseComposition, TransformerMixin):\n             raise ValueError('All estimators are None. At least one is '\n                              'required!')\n \n+        valid_estimators = [(name, clf) for name, clf in zip(names, clfs) if clf is not None]\n+        valid_names, valid_clfs = zip(*valid_estimators)\n+\n         self.estimators_ = Parallel(n_jobs=self.n_jobs)(\n                 delayed(_parallel_fit_estimator)(clone(clf), X, y,\n                                                  sample_weight=sample_weight)\n-                for clf in clfs if clf is not None)\n+                for clf in valid_clfs)\n \n         self.named_estimators_ = Bunch()\n-        for k, e in zip(self.estimators, self.estimators_):\n-            self.named_estimators_[k[0]] = e\n+        for name, estimator in zip(valid_names, self.estimators_):\n+            self.named_estimators_[name] = estimator\n+\n+        if self.weights is not None:\n+            self.weights_ = [w for (_, clf), w in zip(self.estimators, self.weights) if clf is not None]\n+        else:\n+            self.weights_ = None\n+\n         return self\n \n     def set_params(self, **params):\ndiff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 32cad0197..c105d9552 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -805,6 +805,8 @@ def has_fit_parameter(estimator, parameter):\n     True\n \n     \"\"\"\n+    if estimator is None:\n+        return False\n     return parameter in signature(estimator.fit).parameters\n \n \n",
    "resolved": true
}