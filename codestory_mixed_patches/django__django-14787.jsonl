{
    "instance_id": "django__django-14787",
    "model_name_or_path": "codestory-mixed",
    "model_patch": "diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 5c9a5d01c7..738b704de9 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -33,20 +33,25 @@ def _multi_decorate(decorators, method):\n         decorators = [decorators]\n \n     def _wrapper(self, *args, **kwargs):\n-        # bound_method has the signature that 'decorator' expects i.e. no\n-        # 'self' argument, but it's a closure over self so it can call\n-        # 'func'. Also, wrap method.__get__() in a function because new\n-        # attributes can't be set on bound method objects, only on functions.\n-        bound_method = partial(method.__get__(self, type(self)))\n+        # Create a proper bound method wrapper\n+        @wraps(method)\n+        def bound_method(*args, **kwargs):\n+            return method.__get__(self, type(self))(*args, **kwargs)\n+\n+        # Apply decorators to the bound method\n+        decorated_method = bound_method\n         for dec in decorators:\n-            bound_method = dec(bound_method)\n-        return bound_method(*args, **kwargs)\n+            decorated_method = dec(decorated_method)\n+\n+        return decorated_method(*args, **kwargs)\n \n-    # Copy any attributes that a decorator adds to the function it decorates.\n+    # Copy any attributes that decorators add to the function they decorate.\n     for dec in decorators:\n         _update_method_wrapper(_wrapper, dec)\n+\n     # Preserve any existing attributes of 'method', including the name.\n     update_wrapper(_wrapper, method)\n+\n     return _wrapper\n \n \n",
    "resolved": true
}