{
    "instance_id": "django__django-15498",
    "model_name_or_path": "codestory-mixed",
    "model_patch": "diff --git a/django/utils/cache.py b/django/utils/cache.py\nindex 90292ce4da..30a4bfca9d 100644\n--- a/django/utils/cache.py\n+++ b/django/utils/cache.py\n@@ -175,7 +175,9 @@ def get_conditional_response(request, etag=None, last_modified=None, response=No\n     )\n     if_none_match_etags = parse_etags(request.META.get(\"HTTP_IF_NONE_MATCH\", \"\"))\n     if_modified_since = request.META.get(\"HTTP_IF_MODIFIED_SINCE\")\n-    if_modified_since = if_modified_since and parse_http_date_safe(if_modified_since)\n+    if_modified_since = (\n+        parse_http_date_safe(if_modified_since) if if_modified_since else None\n+    )\n \n     # Step 1 of section 6 of RFC 7232: Test the If-Match precondition.\n     if if_match_etags and not _if_match_passes(etag, if_match_etags):\ndiff --git a/django/utils/http.py b/django/utils/http.py\nindex 0292713235..78cd777f05 100644\n--- a/django/utils/http.py\n+++ b/django/utils/http.py\n@@ -146,10 +146,12 @@ def parse_http_date_safe(date):\n     \"\"\"\n     Same as parse_http_date, but return None if the input is invalid.\n     \"\"\"\n+    if not date:\n+        return None\n     try:\n         return parse_http_date(date)\n     except Exception:\n-        pass\n+        return None\n \n \n # Base 36 functions: useful for generating compact URLs\ndiff --git a/django/views/static.py b/django/views/static.py\nindex 1c558a53ff..3519b786d2 100644\n--- a/django/views/static.py\n+++ b/django/views/static.py\n@@ -126,7 +126,7 @@ def was_modified_since(header=None, mtime=0, size=0):\n       This is the size of the item we're talking about.\n     \"\"\"\n     try:\n-        if header is None:\n+        if header is None or header == '':\n             raise ValueError\n         matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n         header_mtime = parse_http_date(matches[1])\n",
    "resolved": true
}