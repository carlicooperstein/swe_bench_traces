{
    "instance_id": "scikit-learn__scikit-learn-13497",
    "model_name_or_path": "codestory-mixed",
    "model_patch": "diff --git a/sklearn/feature_selection/mutual_info_.py b/sklearn/feature_selection/mutual_info_.py\nindex d5d1b7fb5..5d441e256 100644\n--- a/sklearn/feature_selection/mutual_info_.py\n+++ b/sklearn/feature_selection/mutual_info_.py\n@@ -247,19 +247,22 @@ def _estimate_mi(X, y, discrete_features='auto', discrete_target=False,\n     X, y = check_X_y(X, y, accept_sparse='csc', y_numeric=not discrete_target)\n     n_samples, n_features = X.shape\n \n-    if discrete_features == 'auto':\n+    if isinstance(discrete_features, str) and discrete_features == 'auto':\n         discrete_features = issparse(X)\n \n     if isinstance(discrete_features, bool):\n-        discrete_mask = np.empty(n_features, dtype=bool)\n-        discrete_mask.fill(discrete_features)\n-    else:\n-        discrete_features = np.asarray(discrete_features)\n-        if discrete_features.dtype != 'bool':\n+        discrete_mask = np.full(n_features, discrete_features, dtype=bool)\n+    elif isinstance(discrete_features, (np.ndarray, list)):\n+        if np.issubdtype(np.array(discrete_features).dtype, np.integer):\n             discrete_mask = np.zeros(n_features, dtype=bool)\n             discrete_mask[discrete_features] = True\n+        elif np.issubdtype(np.array(discrete_features).dtype, np.bool_):\n+            discrete_mask = np.array(discrete_features, dtype=bool)\n         else:\n-            discrete_mask = discrete_features\n+            raise ValueError(\"When an array, discrete_features must be either \"\n+                             \"integer or boolean.\")\n+    else:\n+        raise ValueError(\"Invalid type for discrete_features.\")\n \n     continuous_mask = ~discrete_mask\n     if np.any(continuous_mask) and issparse(X):\n",
    "resolved": true
}