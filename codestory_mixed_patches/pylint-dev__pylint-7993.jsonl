{
    "instance_id": "pylint-dev__pylint-7993",
    "model_name_or_path": "codestory-mixed",
    "model_patch": "diff --git a/pylint/reporters/text.py b/pylint/reporters/text.py\nindex 29bd46798..24d5e4b9e 100644\n--- a/pylint/reporters/text.py\n+++ b/pylint/reporters/text.py\n@@ -174,15 +174,24 @@ class TextReporter(BaseReporter):\n         # Set template to the currently selected template\n         self._template = template\n \n-        # Check to see if all parameters in the template are attributes of the Message\n-        arguments = re.findall(r\"\\{(.+?)(:.*)?\\}\", template)\n+        # Regular expression to match arguments in the template, handling nested braces\n+        # It captures the outermost argument name, ignoring nested structures\n+        arg_pattern = r'\\{([^{}]+?)(:.*?)?\\}'\n+        \n+        # Find all arguments in the template\n+        arguments = re.findall(arg_pattern, template)\n+\n         for argument in arguments:\n-            if argument[0] not in MESSAGE_FIELDS:\n+            # Extract the actual argument name, ignoring any nested structures\n+            arg_name = argument[0].strip()\n+            if arg_name not in MESSAGE_FIELDS:\n                 warnings.warn(\n-                    f\"Don't recognize the argument '{argument[0]}' in the --msg-template. \"\n+                    f\"Don't recognize the argument '{arg_name}' in the --msg-template. \"\n                     \"Are you sure it is supported on the current version of pylint?\"\n                 )\n-                template = re.sub(r\"\\{\" + argument[0] + r\"(:.*?)?\\}\", \"\", template)\n+                # Remove the entire argument placeholder from the template\n+                template = re.sub(r'\\{' + re.escape(arg_name) + r'(:.*?)?\\}', '', template)\n+\n         self._fixed_template = template\n \n     def write_message(self, msg: Message) -> None:\n",
    "resolved": true
}