{
    "instance_id": "sympy__sympy-17655",
    "model_name_or_path": "codestory-mixed",
    "model_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex 7c978c47be..425d41f35d 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -213,14 +213,20 @@ def __add__(self, other):\n         sympy.geometry.point.Point.translate\n \n         \"\"\"\n+        from sympy.core.mul import Mul\n         try:\n-            s, o = Point._normalize_dimension(self, Point(other, evaluate=False))\n-        except TypeError:\n+            if not isinstance(other, Point):\n+                if isinstance(other, Mul) and any(isinstance(arg, Point) for arg in other.args):\n+                    scalar, point = other.as_coeff_Mul()\n+                    other = Point([scalar * coord for coord in point.args])\n+                else:\n+                    other = Point(other, evaluate=False)\n+            s, o = Point._normalize_dimension(self, other)\n+            coords = list(map(lambda x, y: simplify(x + y), s, o))\n+            return Point(coords, evaluate=False)\n+        except (TypeError, ValueError):\n             raise GeometryError(\"Don't know how to add {} and a Point object\".format(other))\n \n-        coords = [simplify(a + b) for a, b in zip(s, o)]\n-        return Point(coords, evaluate=False)\n-\n     def __contains__(self, item):\n         return item in self.args\n \n@@ -853,6 +859,11 @@ def unit(self):\n     n = evalf\n \n     __truediv__ = __div__\n+    def __rmul__(self, other):\n+        \"\"\"Right multiplication to handle scalar * Point.\"\"\"\n+        if isinstance(other, (int, float, sympify(0).func)):\n+            return self.__mul__(other)\n+        return NotImplemented\n \n class Point2D(Point):\n     \"\"\"A point in a 2-dimensional Euclidean space.\n",
    "resolved": true
}