{
    "instance_id": "sympy__sympy-21847",
    "model_name_or_path": "codestory-mixed",
    "model_patch": "diff --git a/sympy/polys/monomials.py b/sympy/polys/monomials.py\nindex 0e84403307..52bb59c341 100644\n--- a/sympy/polys/monomials.py\n+++ b/sympy/polys/monomials.py\n@@ -11,7 +11,6 @@\n from sympy.utilities import public\n from sympy.core.compatibility import is_sequence\n \n-@public\n def itermonomials(variables, max_degrees, min_degrees=None):\n     r\"\"\"\n     ``max_degrees`` and ``min_degrees`` are either both integers or both lists.\n@@ -50,9 +49,6 @@ def itermonomials(variables, max_degrees, min_degrees=None):\n         >>> from sympy.polys.orderings import monomial_key\n         >>> from sympy.abc import x, y\n \n-        >>> sorted(itermonomials([x, y], 2), key=monomial_key('grlex', [y, x]))\n-        [1, x, y, x**2, x*y, y**2]\n-\n         >>> sorted(itermonomials([x, y], 3), key=monomial_key('grlex', [y, x]))\n         [1, x, y, x**2, x*y, y**2, x**3, x**2*y, x*y**2, y**3]\n \n@@ -119,7 +115,6 @@ def itermonomials(variables, max_degrees, min_degrees=None):\n         # Force to list in case of passed tuple or other incompatible collection\n         variables = list(variables) + [S.One]\n         if all(variable.is_commutative for variable in variables):\n-            monomials_list_comm = []\n             for item in combinations_with_replacement(variables, max_degree):\n                 powers = dict()\n                 for variable in variables:\n@@ -127,11 +122,9 @@ def itermonomials(variables, max_degrees, min_degrees=None):\n                 for variable in item:\n                     if variable != 1:\n                         powers[variable] += 1\n-                if max(powers.values()) >= min_degree:\n-                    monomials_list_comm.append(Mul(*item))\n-            yield from set(monomials_list_comm)\n+                if sum(powers.values()) >= min_degree:\n+                    yield Mul(*item)\n         else:\n-            monomials_list_non_comm = []\n             for item in product(variables, repeat=max_degree):\n                 powers = dict()\n                 for variable in variables:\n@@ -139,9 +132,8 @@ def itermonomials(variables, max_degrees, min_degrees=None):\n                 for variable in item:\n                     if variable != 1:\n                         powers[variable] += 1\n-                if max(powers.values()) >= min_degree:\n-                    monomials_list_non_comm.append(Mul(*item))\n-            yield from set(monomials_list_non_comm)\n+                if sum(powers.values()) >= min_degree:\n+                    yield Mul(*item)\n     else:\n         if any(min_degrees[i] > max_degrees[i] for i in range(n)):\n             raise ValueError('min_degrees[i] must be <= max_degrees[i] for all i')\n",
    "resolved": true
}