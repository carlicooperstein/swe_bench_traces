{
    "instance_id": "scikit-learn__scikit-learn-12471",
    "model_name_or_path": "codestory-mixed",
    "model_patch": "diff --git a/sklearn/preprocessing/_encoders.py b/sklearn/preprocessing/_encoders.py\nindex 1e05aba59..25e35f66a 100644\n--- a/sklearn/preprocessing/_encoders.py\n+++ b/sklearn/preprocessing/_encoders.py\n@@ -97,6 +97,17 @@ class _BaseEncoder(BaseEstimator, TransformerMixin):\n \n         for i in range(n_features):\n             Xi = X[:, i]\n+            \n+            # Check if the feature contains string data\n+            if Xi.dtype.kind in {'U', 'S'}:\n+                # Compare max length of input strings with max length of categories\n+                max_len_Xi = max(len(str(x)) for x in Xi)\n+                max_len_cat = max(len(str(c)) for c in self.categories_[i])\n+                \n+                # If categories have longer strings, convert Xi to object dtype\n+                if max_len_cat > max_len_Xi:\n+                    Xi = Xi.astype(object)\n+            \n             diff, valid_mask = _encode_check_unknown(Xi, self.categories_[i],\n                                                      return_mask=True)\n \n@@ -110,7 +121,7 @@ class _BaseEncoder(BaseEstimator, TransformerMixin):\n                     # continue `The rows are marked `X_mask` and will be\n                     # removed later.\n                     X_mask[:, i] = valid_mask\n-                    Xi = Xi.copy()\n+                    Xi = Xi.astype(object)  # Ensure Xi is of object dtype\n                     Xi[~valid_mask] = self.categories_[i][0]\n             _, encoded = _encode(Xi, self.categories_[i], encode=True)\n             X_int[:, i] = encoded\n",
    "resolved": true
}