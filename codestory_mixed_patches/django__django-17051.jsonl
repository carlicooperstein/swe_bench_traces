{
    "instance_id": "django__django-17051",
    "model_name_or_path": "codestory-mixed",
    "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5ac2407ea3..9fbffd42d4 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -736,24 +736,13 @@ class QuerySet(AltersData):\n         Insert each of the instances into the database. Do *not* call\n         save() on each of the instances, do not send any pre/post_save\n         signals, and do not set the primary key attribute if it is an\n-        autoincrement field (except if features.can_return_rows_from_bulk_insert=True).\n+        autoincrement field (except if features.can_return_rows_from_bulk_insert=True\n+        or if update_conflicts=True).\n         Multi-table models are not supported.\n         \"\"\"\n-        # When you bulk insert you don't get the primary keys back (if it's an\n-        # autoincrement, except if can_return_rows_from_bulk_insert=True), so\n-        # you can't insert into the child tables which references this. There\n-        # are two workarounds:\n-        # 1) This could be implemented if you didn't have an autoincrement pk\n-        # 2) You could do it by doing O(n) normal inserts into the parent\n-        #    tables to get the primary keys back and then doing a single bulk\n-        #    insert into the childmost table.\n-        # We currently set the primary keys on the objects when using\n-        # PostgreSQL via the RETURNING ID clause. It should be possible for\n-        # Oracle as well, but the semantics for extracting the primary keys is\n-        # trickier so it's not done yet.\n         if batch_size is not None and batch_size <= 0:\n             raise ValueError(\"Batch size must be a positive integer.\")\n-        # Check that the parents share the same concrete model with the our\n+        # Check that the parents share the same concrete model with our\n         # model to detect the inheritance pattern ConcreteGrandParent ->\n         # MultiTableParent -> ProxyChild. Simply checking self.model._meta.proxy\n         # would not identify that case as involving multiple tables.\n@@ -792,8 +781,8 @@ class QuerySet(AltersData):\n                     update_fields=update_fields,\n                     unique_fields=unique_fields,\n                 )\n-                for obj_with_pk, results in zip(objs_with_pk, returned_columns):\n-                    for result, field in zip(results, opts.db_returning_fields):\n+                for obj_with_pk, results in zip(objs_with_pk, returned_columns or []):\n+                    for result, field in zip(results or [], opts.db_returning_fields):\n                         if field != opts.pk:\n                             setattr(obj_with_pk, field.attname, result)\n                 for obj_with_pk in objs_with_pk:\n@@ -809,17 +798,14 @@ class QuerySet(AltersData):\n                     update_fields=update_fields,\n                     unique_fields=unique_fields,\n                 )\n-                connection = connections[self.db]\n-                if (\n-                    connection.features.can_return_rows_from_bulk_insert\n-                    and on_conflict is None\n-                ):\n-                    assert len(returned_columns) == len(objs_without_pk)\n-                for obj_without_pk, results in zip(objs_without_pk, returned_columns):\n-                    for result, field in zip(results, opts.db_returning_fields):\n-                        setattr(obj_without_pk, field.attname, result)\n-                    obj_without_pk._state.adding = False\n-                    obj_without_pk._state.db = self.db\n+                can_return_ids = connections[self.db].features.can_return_rows_from_bulk_insert or update_conflicts\n+                if can_return_ids and returned_columns:\n+                    returned_columns = [r for r in returned_columns if r is not None]\n+                    for obj_without_pk, results in zip(objs_without_pk[:len(returned_columns)], returned_columns):\n+                        for result, field in zip(results, opts.db_returning_fields):\n+                            setattr(obj_without_pk, field.attname, result)\n+                        obj_without_pk._state.adding = False\n+                        obj_without_pk._state.db = self.db\n \n         return objs\n \n@@ -1835,17 +1821,20 @@ class QuerySet(AltersData):\n         max_batch_size = max(ops.bulk_batch_size(fields, objs), 1)\n         batch_size = min(batch_size, max_batch_size) if batch_size else max_batch_size\n         inserted_rows = []\n-        bulk_return = connection.features.can_return_rows_from_bulk_insert\n+        bulk_return = connection.features.can_return_rows_from_bulk_insert or (on_conflict == 'update')\n         for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n-            if bulk_return and on_conflict is None:\n-                inserted_rows.extend(\n-                    self._insert(\n-                        item,\n-                        fields=fields,\n-                        using=self.db,\n-                        returning_fields=self.model._meta.db_returning_fields,\n-                    )\n+            if bulk_return:\n+                batch_results = self._insert(\n+                    item,\n+                    fields=fields,\n+                    using=self.db,\n+                    returning_fields=self.model._meta.db_returning_fields,\n+                    on_conflict=on_conflict,\n+                    update_fields=update_fields,\n+                    unique_fields=unique_fields,\n                 )\n+                if batch_results:\n+                    inserted_rows.extend(batch_results)\n             else:\n                 self._insert(\n                     item,\n@@ -1855,7 +1844,7 @@ class QuerySet(AltersData):\n                     update_fields=update_fields,\n                     unique_fields=unique_fields,\n                 )\n-        return inserted_rows\n+        return inserted_rows if bulk_return else None\n \n     def _chain(self):\n         \"\"\"\n",
    "resolved": true
}