{
    "instance_id": "psf__requests-1963",
    "model_name_or_path": "codestory-mixed",
    "model_patch": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex 425db22c..3dd53c7a 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -86,6 +86,7 @@ class SessionRedirectMixin(object):\n         \"\"\"Receives a Response. Returns a generator of Responses.\"\"\"\n \n         i = 0\n+        current_method = req.method\n \n         while resp.is_redirect:\n             prepared_request = req.copy()\n@@ -99,7 +100,6 @@ class SessionRedirectMixin(object):\n             resp.close()\n \n             url = resp.headers['location']\n-            method = req.method\n \n             # Handle redirection without scheme (see: RFC 1808 Section 4)\n             if url.startswith('//'):\n@@ -122,20 +122,20 @@ class SessionRedirectMixin(object):\n \n             # http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.4\n             if (resp.status_code == codes.see_other and\n-                    method != 'HEAD'):\n-                method = 'GET'\n+                    current_method != 'HEAD'):\n+                current_method = 'GET'\n \n             # Do what the browsers do, despite standards...\n             # First, turn 302s into GETs.\n-            if resp.status_code == codes.found and method != 'HEAD':\n-                method = 'GET'\n+            if resp.status_code == codes.found and current_method != 'HEAD':\n+                current_method = 'GET'\n \n             # Second, if a POST is responded to with a 301, turn it into a GET.\n             # This bizarre behaviour is explained in Issue 1704.\n-            if resp.status_code == codes.moved and method == 'POST':\n-                method = 'GET'\n+            if resp.status_code == codes.moved and current_method == 'POST':\n+                current_method = 'GET'\n \n-            prepared_request.method = method\n+            prepared_request.method = current_method\n \n             # https://github.com/kennethreitz/requests/issues/1084\n             if resp.status_code not in (codes.temporary, codes.resume):\n@@ -183,6 +183,26 @@ class SessionRedirectMixin(object):\n             i += 1\n             yield resp\n \n+    def _get_redirect_method(self, resp, current_method):\n+        \"\"\"\n+        Determine the appropriate HTTP method for the next request in a redirect chain.\n+\n+        :param resp: The response object from the last request.\n+        :param current_method: The HTTP method used in the last request.\n+        :return: The HTTP method to be used for the next request.\n+        \"\"\"\n+        if resp.status_code == codes.see_other and current_method != 'HEAD':\n+            current_method = 'GET'\n+        # Do what the browsers do, despite standards...\n+        # First, turn 302s into GETs.\n+        if resp.status_code == codes.found and current_method != 'HEAD':\n+            current_method = 'GET'\n+        # Second, if a POST is responded to with a 301, turn it into a GET.\n+        # This bizarre behaviour is explained in Issue 1704.\n+        if resp.status_code == codes.moved and current_method == 'POST':\n+            current_method = 'GET'\n+\n+        return current_method\n \n class Session(SessionRedirectMixin):\n     \"\"\"A Requests session.\n",
    "resolved": true
}