{
    "instance_id": "sympy__sympy-15678",
    "model_name_or_path": "codestory-mixed",
    "model_patch": "diff --git a/sympy/core/symbol.py b/sympy/core/symbol.py\nindex 44674d1984..6bd1d72592 100644\n--- a/sympy/core/symbol.py\n+++ b/sympy/core/symbol.py\n@@ -153,17 +153,20 @@ class Symbol(AtomicExpr, Boolean):\n \n     @property\n     def _diff_wrt(self):\n-        \"\"\"Allow derivatives wrt Symbols.\n+        \"\"\"Allow derivatives wrt Symbols and functions.\n \n         Examples\n         ========\n \n-            >>> from sympy import Symbol\n+            >>> from sympy import Symbol, Function\n             >>> x = Symbol('x')\n             >>> x._diff_wrt\n             True\n+            >>> f = Function('f')(x)\n+            >>> f._diff_wrt\n+            True\n         \"\"\"\n-        return True\n+        return True if isinstance(self, (Symbol, FunctionClass)) else False\n \n     @staticmethod\n     def _sanitize(assumptions, obj=None):\ndiff --git a/sympy/geometry/util.py b/sympy/geometry/util.py\nindex d32adc3066..8fc2228dbd 100644\n--- a/sympy/geometry/util.py\n+++ b/sympy/geometry/util.py\n@@ -565,17 +565,28 @@ def idiff(eq, y, x, n=1):\n     sympy.core.function.diff: explicitly differentiates wrt symbols\n \n     \"\"\"\n+    from sympy import Eq\n+    from sympy.core.function import AppliedUndef\n+\n+    if isinstance(eq, Eq):\n+        eq = eq.lhs - eq.rhs\n+\n     if is_sequence(y):\n         dep = set(y)\n         y = y[0]\n-    elif isinstance(y, Symbol):\n+    elif isinstance(y, (Symbol, AppliedUndef)):\n         dep = {y}\n     else:\n         raise ValueError(\"expecting x-dependent symbol(s) but got: %s\" % y)\n \n-    f = dict([(s, Function(\n-        s.name)(x)) for s in eq.free_symbols if s != x and s in dep])\n-    dydx = Function(y.name)(x).diff(x)\n+    if isinstance(y, AppliedUndef):\n+        y_func = y\n+        y = y_func.func\n+    else:\n+        y_func = Function(y.name)(x)\n+\n+    f = dict([(s, Function(s.name)(x)) for s in eq.free_symbols if s != x and s in dep])\n+    dydx = y_func.diff(x)\n     eq = eq.subs(f)\n     derivs = {}\n     for i in range(n):\n",
    "resolved": true
}