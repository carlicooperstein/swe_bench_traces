{
    "instance_id": "sympy__sympy-14396",
    "model_name_or_path": "codestory-mixed",
    "model_patch": "diff --git a/sympy/polys/polyoptions.py b/sympy/polys/polyoptions.py\nindex 6e504a3057..a9acd78767 100644\n--- a/sympy/polys/polyoptions.py\n+++ b/sympy/polys/polyoptions.py\n@@ -480,7 +480,35 @@ def preprocess(cls, domain):\n                 gens = list(map(sympify, r.groups()[1].split(',')))\n                 return sympy.polys.domains.QQ.algebraic_field(*gens)\n \n-        raise OptionError('expected a valid domain specification, got %s' % domain)\n+            # New regex pattern for real fields with generators\n+            _re_realfield_with_gens = re.compile(r\"^(R|RR)\\[(.+)\\]$\")\n+            # New regex pattern for complex fields with generators\n+            _re_complexfield_with_gens = re.compile(r\"^(C|CC)\\[(.+)\\]$\")\n+            # New regex pattern for finite fields with generators\n+            _re_finitefield_with_gens = re.compile(r\"^(F|FF)\\[(.+)\\]$\")\n+            r = _re_realfield_with_gens.match(domain)\n+            if r is not None:\n+                gens = list(map(sympify, r.groups()[1].split(',')))\n+                if r.group(1) == 'R':\n+                    return sympy.polys.domains.RR.poly_ring(*gens)\n+                elif r.group(1) == 'RR':\n+                    return sympy.polys.domains.RR.poly_ring(*gens)\n+            r = _re_complexfield_with_gens.match(domain)\n+            if r is not None:\n+                gens = list(map(sympify, r.groups()[1].split(',')))\n+                if r.group(1) == 'C':\n+                    return sympy.polys.domains.CC.poly_ring(*gens)\n+                elif r.group(1) == 'CC':\n+                    return sympy.polys.domains.CC.poly_ring(*gens)\n+            r = _re_finitefield_with_gens.match(domain)\n+            if r is not None:\n+                gens = list(map(sympify, r.groups()[1].split(',')))\n+                if r.group(1) == 'F':\n+                    return sympy.polys.domains.FF.poly_ring(*gens)\n+                elif r.group(1) == 'FF':\n+                    return sympy.polys.domains.FF.poly_ring(*gens)\n+\n+        raise OptionError('Expected a valid domain specification, got %s' % domain)\n \n     @classmethod\n     def postprocess(cls, options):\n",
    "resolved": true
}