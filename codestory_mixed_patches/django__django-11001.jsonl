{
    "instance_id": "django__django-11001",
    "model_name_or_path": "codestory-mixed",
    "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 7649c39262..b08a634449 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -274,6 +274,9 @@ class SQLCompiler:\n         else:\n             asc, desc = ORDER_DIR['DESC']\n \n+        def normalize_sql(sql):\n+            return ' '.join(sql.split())\n+\n         order_by = []\n         for field in ordering:\n             if hasattr(field, 'resolve_expression'):\n@@ -331,6 +334,9 @@ class SQLCompiler:\n         result = []\n         seen = set()\n \n+        # Update the regular expression to capture the entire SQL content\n+        self.ordering_parts = re.compile(r'^(.*?)\\s*(ASC|DESC)?\\s*$', re.DOTALL)\n+\n         for expr, is_ref in order_by:\n             resolved = expr.resolve_expression(self.query, allow_joins=True, reuse=None)\n             if self.query.combinator:\n@@ -349,15 +355,15 @@ class SQLCompiler:\n                 else:\n                     raise DatabaseError('ORDER BY term does not match any column in the result set.')\n             sql, params = self.compile(resolved)\n-            # Don't add the same column twice, but the order direction is\n-            # not taken into account so we strip it. When this entire method\n-            # is refactored into expressions, then we can check each part as we\n-            # generate it.\n-            without_ordering = self.ordering_parts.search(sql).group(1)\n+            # Normalize the SQL string\n+            normalized_sql = normalize_sql(sql)\n+            # Use the normalized SQL for duplicate checking\n+            without_ordering = self.ordering_parts.search(normalized_sql).group(1)\n             params_hash = make_hashable(params)\n             if (without_ordering, params_hash) in seen:\n                 continue\n             seen.add((without_ordering, params_hash))\n+            # Use the original SQL when adding to the result list\n             result.append((resolved, (sql, params, is_ref)))\n         return result\n \n",
    "resolved": true
}