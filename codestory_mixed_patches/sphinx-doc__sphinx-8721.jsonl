{
    "instance_id": "sphinx-doc__sphinx-8721",
    "model_name_or_path": "codestory-mixed",
    "model_patch": "diff --git a/sphinx/ext/viewcode.py b/sphinx/ext/viewcode.py\nindex a7d52a91c..bfb834c7b 100644\n--- a/sphinx/ext/viewcode.py\n+++ b/sphinx/ext/viewcode.py\n@@ -159,6 +159,11 @@ def get_module_filename(app: Sphinx, modname: str) -> Optional[str]:\n \n def should_generate_module_page(app: Sphinx, modname: str) -> bool:\n     \"\"\"Check generation of module page is needed.\"\"\"\n+    builder_name = app.builder.name\n+    if builder_name.startswith('epub') and not app.config.viewcode_enable_epub:\n+        # Do not generate module page for epub if viewcode_enable_epub is False\n+        return False\n+\n     module_filename = get_module_filename(app, modname)\n     if module_filename is None:\n         # Always (re-)generate module page when module filename is not found.\n@@ -180,6 +185,11 @@ def should_generate_module_page(app: Sphinx, modname: str) -> bool:\n \n def collect_pages(app: Sphinx) -> Generator[Tuple[str, Dict[str, Any], str], None, None]:\n     env = app.builder.env\n+\n+    # Check if the builder is for epub and viewcode_enable_epub is False\n+    if app.builder.name.startswith('epub') and not app.config.viewcode_enable_epub:\n+        return\n+\n     if not hasattr(env, '_viewcode_modules'):\n         return\n     highlighter = app.builder.highlighter  # type: ignore\n",
    "resolved": true
}