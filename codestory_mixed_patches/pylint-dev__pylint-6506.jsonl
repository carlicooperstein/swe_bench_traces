{
    "instance_id": "pylint-dev__pylint-6506",
    "model_name_or_path": "codestory-mixed",
    "model_patch": "diff --git a/pylint/config/config_initialization.py b/pylint/config/config_initialization.py\nindex 24e453a73..782f27052 100644\n--- a/pylint/config/config_initialization.py\n+++ b/pylint/config/config_initialization.py\n@@ -38,7 +38,7 @@ def _config_initialization(\n     try:\n         config_data, config_args = config_file_parser.parse_config_file(\n             file_path=config_file\n-        )\n+          )\n     except OSError as ex:\n         print(ex, file=sys.stderr)\n         sys.exit(32)\n@@ -80,9 +80,7 @@ def _config_initialization(\n         elif opt.startswith(\"-\"):\n             unrecognized_options.append(opt[1:])\n     if unrecognized_options:\n-        msg = \", \".join(unrecognized_options)\n-        linter.add_message(\"unrecognized-option\", line=0, args=msg)\n-        raise _UnrecognizedOptionError(options=unrecognized_options)\n+        _print_usage_and_exit(unrecognized_options, verbose_mode, linter)\n \n     # Set the current module to configuration as we don't know where\n     # the --load-plugins key is coming from\n@@ -104,3 +102,13 @@ def _config_initialization(\n     linter._parse_error_mode()\n \n     return parsed_args_list\n+\n+def _print_usage_and_exit(unrecognized_options: list[str], verbose_mode, linter) -> None:\n+    \"\"\"Print a usage message for unrecognized options and exit.\"\"\"\n+    msg = f\"Unrecognized option(s): {', '.join(unrecognized_options)}\"\n+    if verbose_mode:\n+        linter.add_message(\"unrecognized-option\", line=0, args=msg)\n+    print(\"\\nUsage:\", file=sys.stderr)\n+    print(f\"Error: {msg}\", file=sys.stderr)\n+    print(linter.help(), file=sys.stderr)\n+    sys.exit(2)\n\\ No newline at end of file\n",
    "resolved": true
}