{
    "instance_id": "pytest-dev__pytest-11143",
    "model_name_or_path": "aider--gpt-4o",
    "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 157903faf..7e75fe72f 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -667,8 +667,10 @@ class AssertionRewriter(ast.NodeVisitor):\n         # docstrings and __future__ imports, so first figure out where that is.\n         doc = getattr(mod, \"docstring\", None)\n         expect_docstring = doc is None\n-        if doc is not None and self.is_rewrite_disabled(doc):\n-            return\n+        if doc is not None:\n+            if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n+                return\n+            expect_docstring = False\n         pos = 0\n         item = None\n         for item in mod.body:\n@@ -676,6 +678,7 @@ class AssertionRewriter(ast.NodeVisitor):\n                 expect_docstring\n                 and isinstance(item, ast.Expr)\n                 and isinstance(item.value, ast.Constant)\n+                and isinstance(item.value.value, str)\n             ):\n                 doc = item.value.value\n                 if self.is_rewrite_disabled(doc):\n@@ -743,6 +746,8 @@ class AssertionRewriter(ast.NodeVisitor):\n \n     @staticmethod\n     def is_rewrite_disabled(docstring: str) -> bool:\n+        if not isinstance(docstring, str):\n+            return False\n         return \"PYTEST_DONT_REWRITE\" in docstring\n \n     def variable(self) -> str:\n",
    "model": "gpt-4o",
    "temperature": 0,
    "gold_files": [
        "src/_pytest/assertion/rewrite.py"
    ],
    "edited_files": [
        "src/_pytest/assertion/rewrite.py"
    ],
    "edit_outcome": false,
    "lint_outcome": false,
    "test_outcome": false,
    "try": 1,
    "tries": 1,
    "all_results": [
        {
            "instance_id": "pytest-dev__pytest-11143",
            "model_name_or_path": "aider--gpt-4o",
            "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 157903faf..7e75fe72f 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -667,8 +667,10 @@ class AssertionRewriter(ast.NodeVisitor):\n         # docstrings and __future__ imports, so first figure out where that is.\n         doc = getattr(mod, \"docstring\", None)\n         expect_docstring = doc is None\n-        if doc is not None and self.is_rewrite_disabled(doc):\n-            return\n+        if doc is not None:\n+            if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n+                return\n+            expect_docstring = False\n         pos = 0\n         item = None\n         for item in mod.body:\n@@ -676,6 +678,7 @@ class AssertionRewriter(ast.NodeVisitor):\n                 expect_docstring\n                 and isinstance(item, ast.Expr)\n                 and isinstance(item.value, ast.Constant)\n+                and isinstance(item.value.value, str)\n             ):\n                 doc = item.value.value\n                 if self.is_rewrite_disabled(doc):\n@@ -743,6 +746,8 @@ class AssertionRewriter(ast.NodeVisitor):\n \n     @staticmethod\n     def is_rewrite_disabled(docstring: str) -> bool:\n+        if not isinstance(docstring, str):\n+            return False\n         return \"PYTEST_DONT_REWRITE\" in docstring\n \n     def variable(self) -> str:\n",
            "model": "gpt-4o",
            "temperature": 0,
            "gold_files": [
                "src/_pytest/assertion/rewrite.py"
            ],
            "edited_files": [
                "src/_pytest/assertion/rewrite.py"
            ],
            "edit_outcome": false,
            "lint_outcome": false,
            "test_outcome": false,
            "try": 1
        }
    ],
    "cost": 0
}