{
    "instance_id": "scikit-learn__scikit-learn-14894",
    "model_name_or_path": "codestory-mixed",
    "model_patch": "diff --git a/sklearn/svm/base.py b/sklearn/svm/base.py\nindex 64cebe837..fa232d0fd 100644\n--- a/sklearn/svm/base.py\n+++ b/sklearn/svm/base.py\n@@ -258,8 +258,7 @@ class BaseLibSVM(BaseEstimator, metaclass=ABCMeta):\n \n         self._warn_from_fit_status()\n \n-    def _sparse_fit(self, X, y, sample_weight, solver_type, kernel,\n-                    random_seed):\n+    def _sparse_fit(self, X, y, sample_weight, solver_type, kernel, random_seed):\n         X.data = np.asarray(X.data, dtype=np.float64, order='C')\n         X.sort_indices()\n \n@@ -284,14 +283,19 @@ class BaseLibSVM(BaseEstimator, metaclass=ABCMeta):\n             n_class = len(self.classes_) - 1\n         else:  # regression\n             n_class = 1\n+\n         n_SV = self.support_vectors_.shape[0]\n \n-        dual_coef_indices = np.tile(np.arange(n_SV), n_class)\n-        dual_coef_indptr = np.arange(0, dual_coef_indices.size + 1,\n-                                     dual_coef_indices.size / n_class)\n-        self.dual_coef_ = sp.csr_matrix(\n-            (dual_coef_data, dual_coef_indices, dual_coef_indptr),\n-            (n_class, n_SV))\n+        if n_SV > 0:\n+            dual_coef_indices = np.tile(np.arange(n_SV), n_class)\n+            dual_coef_indptr = np.arange(0, dual_coef_indices.size + 1,\n+                                        dual_coef_indices.size / n_class)\n+            self.dual_coef_ = sp.csr_matrix(\n+                (dual_coef_data, dual_coef_indices, dual_coef_indptr),\n+                (n_class, n_SV))\n+        else:\n+            self.dual_coef_ = sp.csr_matrix((n_class, 0))\n+\n \n     def predict(self, X):\n         \"\"\"Perform regression on samples in X.\n",
    "resolved": true
}