{
    "instance_id": "django__django-13964",
    "model_name_or_path": "codestory-mixed",
    "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 2428218696..5efbbe1675 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -925,6 +925,7 @@ class Model(metaclass=ModelBase):\n                 # database to raise an IntegrityError if applicable. If\n                 # constraints aren't supported by the database, there's the\n                 # unavoidable risk of data corruption.\n+                from django.core.validators import EMPTY_VALUES\n                 if obj.pk is None:\n                     # Remove the object from a related instance cache.\n                     if not field.remote_field.multiple:\n@@ -933,7 +934,7 @@ class Model(metaclass=ModelBase):\n                         \"%s() prohibited to prevent data loss due to unsaved \"\n                         \"related object '%s'.\" % (operation_name, field.name)\n                     )\n-                elif getattr(self, field.attname) is None:\n+                elif getattr(self, field.attname) in EMPTY_VALUES:\n                     # Use pk from related object if it has been saved after\n                     # an assignment.\n                     setattr(self, field.attname, obj.pk)\ndiff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 899ae8efe8..d5553b4fd0 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -890,6 +890,8 @@ class ForeignKey(ForeignObject):\n         return name, path, args, kwargs\n \n     def to_python(self, value):\n+        if value is None or (isinstance(value, str) and value.strip() == ''):\n+            return None\n         return self.target_field.to_python(value)\n \n     @property\n@@ -963,17 +965,40 @@ class ForeignKey(ForeignObject):\n         return field_default\n \n     def get_db_prep_save(self, value, connection):\n-        if value is None or (value == '' and\n-                             (not self.target_field.empty_strings_allowed or\n-                              connection.features.interprets_empty_strings_as_nulls)):\n+        if value is None:\n+            return None\n+        elif isinstance(value, self.remote_field.model):\n+            # If value is an instance of the related model, get its PK\n+            value = value.pk\n+        if value == '' and (not self.target_field.empty_strings_allowed or\n+                            connection.features.interprets_empty_strings_as_nulls):\n             return None\n         else:\n+            # Prepare the value for saving, regardless of its type\n             return self.target_field.get_db_prep_save(value, connection=connection)\n \n     def get_db_prep_value(self, value, connection, prepared=False):\n+        if value is None:\n+            return None\n+        if isinstance(value, self.remote_field.model):\n+            # If the value is an instance of the related model\n+            if value.pk is None:\n+                # If the instance is not saved, but has its PK attribute set\n+                if hasattr(value, self.remote_field.field.attname):\n+                    value = getattr(value, self.remote_field.field.attname)\n+                else:\n+                    return None\n+            else:\n+                value = value.pk\n         return self.target_field.get_db_prep_value(value, connection, prepared)\n \n     def get_prep_value(self, value):\n+        if value is None:\n+            return None\n+        if isinstance(value, self.remote_field.model):\n+            if value.pk is None:\n+                return None\n+            value = value.pk\n         return self.target_field.get_prep_value(value)\n \n     def contribute_to_related_class(self, cls, related):\n@@ -1022,7 +1047,19 @@ class ForeignKey(ForeignObject):\n                 if output_field is self:\n                     raise ValueError('Cannot resolve output_field.')\n         return super().get_col(alias, output_field)\n-\n+def update_foreign_key_value(self, instance):\n+    cached_value = self.get_cached_value(instance, default=None)\n+    if cached_value is not None:\n+        current_pk = self.target_field.get_prep_value(cached_value.pk)\n+        if current_pk != getattr(instance, self.attname):\n+            setattr(instance, self.attname, current_pk)\n+    return getattr(instance, self.attname)\n+\n+def pre_save(self, model_instance, add):\n+    if self.remote_field.parent_link:\n+        return getattr(model_instance, self.attname)\n+    # Get the primary key value of the related object.\n+    return self.update_foreign_key_value(model_instance)\n \n class OneToOneField(ForeignKey):\n     \"\"\"\n",
    "resolved": true
}