{
    "instance_id": "scikit-learn__scikit-learn-15535",
    "model_name_or_path": "codestory-mixed",
    "model_patch": "diff --git a/sklearn/metrics/cluster/_supervised.py b/sklearn/metrics/cluster/_supervised.py\nindex 4bddae35c..b2b3891f8 100644\n--- a/sklearn/metrics/cluster/_supervised.py\n+++ b/sklearn/metrics/cluster/_supervised.py\n@@ -43,10 +43,10 @@ def check_clusterings(labels_true, labels_pred):\n         The predicted labels.\n     \"\"\"\n     labels_true = check_array(\n-        labels_true, ensure_2d=False, ensure_min_samples=0\n+        labels_true, ensure_2d=False, ensure_min_samples=0, dtype=None\n     )\n     labels_pred = check_array(\n-        labels_pred, ensure_2d=False, ensure_min_samples=0\n+        labels_pred, ensure_2d=False, ensure_min_samples=0, dtype=None\n     )\n \n     # input checks\n@@ -129,7 +129,7 @@ def contingency_matrix(labels_true, labels_pred, eps=None, sparse=False):\n         contingency = contingency.toarray()\n         if eps is not None:\n             # don't use += as contingency is integer\n-            contingency = contingency + eps\n+            contingency = contingency.astype(np.float64) + eps\n     return contingency\n \n \n@@ -589,10 +589,10 @@ def mutual_info_score(labels_true, labels_pred, contingency=None):\n \n     Parameters\n     ----------\n-    labels_true : int array, shape = [n_samples]\n+    labels_true : array-like of shape (n_samples,)\n         A clustering of the data into disjoint subsets.\n \n-    labels_pred : int array-like of shape (n_samples,)\n+    labels_pred : array-like of shape (n_samples,)\n         A clustering of the data into disjoint subsets.\n \n     contingency : {None, array, sparse matrix}, \\\n@@ -617,6 +617,13 @@ def mutual_info_score(labels_true, labels_pred, contingency=None):\n     \"\"\"\n     if contingency is None:\n         labels_true, labels_pred = check_clusterings(labels_true, labels_pred)\n+        \n+        # Convert string labels to integer labels\n+        if labels_true.dtype.kind in {'U', 'S', 'O'}:\n+            labels_true = np.unique(labels_true, return_inverse=True)[1]\n+        if labels_pred.dtype.kind in {'U', 'S', 'O'}:\n+            labels_pred = np.unique(labels_pred, return_inverse=True)[1]\n+        \n         contingency = contingency_matrix(labels_true, labels_pred, sparse=True)\n     else:\n         contingency = check_array(contingency,\ndiff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex dad56850f..9385da2e9 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -459,8 +459,11 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n \n     if dtype_numeric:\n         if dtype_orig is not None and dtype_orig.kind == \"O\":\n-            # if input is object, convert to float.\n-            dtype = np.float64\n+            # if input is object, check if it contains strings\n+            if np.issubdtype(array.dtype, np.str_):\n+                dtype = None  # Do not convert strings to float\n+            else:\n+                dtype = np.float64\n         else:\n             dtype = None\n \n",
    "resolved": true
}