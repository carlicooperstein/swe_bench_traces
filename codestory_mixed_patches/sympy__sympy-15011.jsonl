{
    "instance_id": "sympy__sympy-15011",
    "model_name_or_path": "codestory-mixed",
    "model_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex f71bea25f5..bb72093d79 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -709,6 +709,7 @@ def _preprocess(self, args, expr):\n         \"\"\"\n         from sympy import Dummy, Symbol, Function, flatten\n         from sympy.matrices import DeferredVector\n+        from sympy.matrices.expressions.matexpr import MatrixSymbol\n \n         dummify = self._dummify\n \n@@ -725,7 +726,7 @@ def _preprocess(self, args, expr):\n                 argstrs.append(nested_argstrs)\n             elif isinstance(arg, DeferredVector):\n                 argstrs.append(str(arg))\n-            elif isinstance(arg, Symbol):\n+            elif isinstance(arg, (Symbol, MatrixSymbol)):  # Add MatrixSymbol here\n                 argrep = self._argrepr(arg)\n \n                 if dummify or not self._is_safe_ident(argrep):\n@@ -784,7 +785,64 @@ def unpack_lhs(lvalues):\n                 unpack_lhs(val) if iterable(val) else val for val in lvalues))\n \n         return ['{} = {}'.format(unpack_lhs(unpackto), arg)]\n+def _create_safe_name(self, name):\n+    \"\"\"Create a safe identifier name from the given name.\"\"\"\n+    # Replace non-alphanumeric characters with underscores\n+    safe_name = re.sub(r'\\W|^(?=\\d)', '_', name)\n+    # Ensure the name doesn't start with a number\n+    if safe_name[0].isdigit():\n+        safe_name = '_' + safe_name\n+    return safe_name\n+\n+def _is_safe_ident(cls, ident):\n+    if isinstance(ident, MatrixSymbol):\n+        ident = cls._create_safe_name(ident.name)\n+    return isinstance(ident, str) and ident.isidentifier() and not keyword.iskeyword(ident)\n+\n+def _preprocess(self, args, expr):\n+    \"\"\"Preprocess args, expr to replace arguments that do not map\n+    to valid Python identifiers.\n+\n+    Returns string form of args, and updated expr.\n+    \"\"\"\n+    from sympy import Dummy, Symbol, Function, MatrixSymbol, flatten\n+    from sympy.matrices import DeferredVector\n+\n+    dummify = self._dummify\n+\n+    # Args of type Dummy can cause name collisions with args\n+    # of type Symbol.  Force dummify of everything in this\n+    # situation.\n+    if not dummify:\n+        dummify = any(isinstance(arg, Dummy) for arg in flatten(args))\n+\n+    argstrs = []\n+    for arg in args:\n+        if iterable(arg):\n+            nested_argstrs, expr = self._preprocess(arg, expr)\n+            argstrs.append(nested_argstrs)\n+        elif isinstance(arg, DeferredVector):\n+            argstrs.append(str(arg))\n+        elif isinstance(arg, (Symbol, MatrixSymbol)):\n+            if isinstance(arg, MatrixSymbol):\n+                argrep = self._create_safe_name(arg.name)\n+            else:\n+                argrep = self._argrepr(arg)\n+\n+            if dummify or not self._is_safe_ident(argrep):\n+                dummy = Dummy()\n+                argstrs.append(self._argrepr(dummy))\n+                expr = self._subexpr(expr, {arg: dummy})\n+            else:\n+                argstrs.append(argrep)\n+        elif isinstance(arg, Function):\n+            dummy = Dummy()\n+            argstrs.append(self._argrepr(dummy))\n+            expr = self._subexpr(expr, {arg: dummy})\n+        else:\n+            argstrs.append(str(arg))\n \n+    return argstrs, expr\n class _TensorflowEvaluatorPrinter(_EvaluatorPrinter):\n     def _print_unpacking(self, lvalues, rvalue):\n         \"\"\"Generate argument unpacking code.\n",
    "resolved": true
}