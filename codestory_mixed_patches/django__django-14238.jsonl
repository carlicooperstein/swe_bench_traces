{
    "instance_id": "django__django-14238",
    "model_name_or_path": "codestory-mixed",
    "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 0f53d9c30b..9ee2661c64 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -2516,15 +2516,27 @@ class AutoFieldMeta(type):\n     for detecting automatically-generated fields.\n     \"\"\"\n \n+    _cached_subclasses = None\n+\n+    _cached_subclasses = None\n+\n     @property\n     def _subclasses(self):\n-        return (BigAutoField, SmallAutoField)\n+        if self._cached_subclasses is None:\n+            def get_all_subclasses(cls):\n+                return set(cls.__subclasses__()).union(\n+                    [s for c in cls.__subclasses__() for s in get_all_subclasses(c)]\n+                )\n+            self.__class__._cached_subclasses = tuple(\n+                get_all_subclasses(AutoField)\n+            ) + (BigAutoField, SmallAutoField)\n+        return self._cached_subclasses\n \n     def __instancecheck__(self, instance):\n         return isinstance(instance, self._subclasses) or super().__instancecheck__(instance)\n \n     def __subclasscheck__(self, subclass):\n-        return subclass in self._subclasses or super().__subclasscheck__(subclass)\n+        return any(issubclass(subclass, cls) for cls in self._subclasses) or super().__subclasscheck__(subclass)\n \n \n class AutoField(AutoFieldMixin, IntegerField, metaclass=AutoFieldMeta):\n",
    "resolved": true
}