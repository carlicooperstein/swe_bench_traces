{
    "instance_id": "astropy__astropy-12907",
    "model_name_or_path": "codestory-mixed",
    "model_patch": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex a308e27297..b6d71f2893 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -296,21 +296,27 @@ def _separable(transform):\n     transform : `astropy.modeling.Model`\n         A transform (usually a compound model).\n \n-    Returns :\n-    is_separable : ndarray of dtype np.bool\n-        An array of shape (transform.n_outputs,) of boolean type\n-        Each element represents the separablity of the corresponding output.\n+    Returns\n+    -------\n+    is_separable : ndarray\n+        An array representing the separability matrix of the transform.\n     \"\"\"\n     if (transform_matrix := transform._calculate_separability_matrix()) is not NotImplemented:\n         return transform_matrix\n     elif isinstance(transform, CompoundModel):\n         sepleft = _separable(transform.left)\n         sepright = _separable(transform.right)\n-        return _operators[transform.op](sepleft, sepright)\n+        \n+        # Handle nested CompoundModels\n+        if transform.op == '&':\n+        # Both inputs are already separability matrices\n+            return np.block([[sepleft, np.zeros((sepleft.shape[0], sepright.shape[1]))],\n+                            [np.zeros((sepright.shape[0], sepleft.shape[1])), sepright]])\n+        else:\n+            return _operators[transform.op](sepleft, sepright)\n     elif isinstance(transform, Model):\n         return _coord_matrix(transform, 'left', transform.n_outputs)\n \n-\n # Maps modeling operators to a function computing and represents the\n # relationship of axes as an array of 0-es and 1-s\n _operators = {'&': _cstack, '|': _cdot, '+': _arith_oper, '-': _arith_oper,\n",
    "resolved": true
}