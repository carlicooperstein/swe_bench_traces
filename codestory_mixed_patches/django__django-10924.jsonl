{
    "instance_id": "django__django-10924",
    "model_name_or_path": "codestory-mixed",
    "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 0c64748ccd..2d828699eb 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1663,11 +1663,21 @@ class FilePathField(Field):\n \n     def __init__(self, verbose_name=None, name=None, path='', match=None,\n                  recursive=False, allow_files=True, allow_folders=False, **kwargs):\n-        self.path, self.match, self.recursive = path, match, recursive\n+        self._path = path\n+        self.match, self.recursive = match, recursive\n         self.allow_files, self.allow_folders = allow_files, allow_folders\n         kwargs.setdefault('max_length', 100)\n         super().__init__(verbose_name, name, **kwargs)\n \n+    def _resolve_path(self):\n+        if callable(self._path):\n+            return self._path()\n+        return self._path\n+\n+    @property\n+    def path(self):\n+        return self._resolve_path()\n+\n     def check(self, **kwargs):\n         return [\n             *super().check(**kwargs),\n@@ -1687,6 +1697,9 @@ class FilePathField(Field):\n \n     def deconstruct(self):\n         name, path, args, kwargs = super().deconstruct()\n+        path_value = self.path() if callable(self.path) else self.path\n+        if path_value != '':\n+            kwargs['path'] = path_value\n         if self.path != '':\n             kwargs['path'] = self.path\n         if self.match is not None:\n@@ -1708,8 +1721,9 @@ class FilePathField(Field):\n         return str(value)\n \n     def formfield(self, **kwargs):\n+        path = self.path() if callable(self.path) else self.path\n         return super().formfield(**{\n-            'path': self.path,\n+            'path': path,\n             'match': self.match,\n             'recursive': self.recursive,\n             'form_class': forms.FilePathField,\n@@ -1720,7 +1734,19 @@ class FilePathField(Field):\n \n     def get_internal_type(self):\n         return \"FilePathField\"\n-\n+    def _resolve_path(self):\n+        if callable(self._path):\n+            try:\n+                resolved_path = self._path()\n+                if not isinstance(resolved_path, str):\n+                    raise TypeError(\"Callable path must return a string.\")\n+                return resolved_path\n+            except Exception as e:\n+                raise ValueError(f\"Error resolving path: {e}\")\n+        elif isinstance(self._path, str):\n+            return self._path\n+        else:\n+            raise TypeError(\"FilePathField path must be a string or callable.\")\n \n class FloatField(Field):\n     empty_strings_allowed = False\n",
    "resolved": false
}