{
    "instance_id": "psf__requests-3362",
    "model_name_or_path": "codestory-mixed",
    "model_patch": "diff --git a/requests/models.py b/requests/models.py\nindex fbb3c7e6..0268d305 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -694,10 +694,28 @@ class Response(object):\n \n         chunks = reused_chunks if self._content_consumed else stream_chunks\n \n-        if decode_unicode:\n-            chunks = stream_decode_response_unicode(chunks, self)\n+        def decode_stream():\n+            import codecs\n+            decoder = None\n+            for chunk in chunks:\n+                if decode_unicode:\n+                    if decoder is None:\n+                        # Use the same logic as in the 'text' property\n+                        encoding = self.encoding or self.apparent_encoding or 'utf-8'\n+                        decoder = codecs.getincrementaldecoder(encoding)(errors='replace')\n+                    try:\n+                        chunk = decoder.decode(chunk)\n+                    except (UnicodeDecodeError, TypeError):\n+                        # If decoding fails, yield the original chunk\n+                        pass\n+                yield chunk\n+            if decode_unicode and decoder:\n+                final_chunk = decoder.decode(b'', final=True)\n+                if final_chunk:\n+                    yield final_chunk\n+\n+        return decode_stream()\n \n-        return chunks\n \n     def iter_lines(self, chunk_size=ITER_CHUNK_SIZE, decode_unicode=None, delimiter=None):\n         \"\"\"Iterates over the response data, one line at a time.  When\n@@ -774,9 +792,8 @@ class Response(object):\n         if not self.content:\n             return str('')\n \n-        # Fallback to auto-detected encoding.\n-        if self.encoding is None:\n-            encoding = self.apparent_encoding\n+        encoding = self.encoding or self.apparent_encoding\n+\n \n         # Decode unicode from given encoding.\n         try:\n",
    "resolved": true
}