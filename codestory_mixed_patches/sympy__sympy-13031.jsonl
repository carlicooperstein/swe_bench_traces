{
    "instance_id": "sympy__sympy-13031",
    "model_name_or_path": "codestory-mixed",
    "model_patch": "diff --git a/sympy/matrices/common.py b/sympy/matrices/common.py\nindex 7ef51bc847..627b67e38b 100644\n--- a/sympy/matrices/common.py\n+++ b/sympy/matrices/common.py\n@@ -378,6 +378,11 @@ def hstack(cls, *args):\n             return cls._new()\n \n         kls = type(args[0])\n+\n+        if any(arg.rows == 0 for arg in args):\n+            total_cols = sum(arg.cols for arg in args)\n+            return kls.zeros(0, total_cols)\n+\n         return reduce(kls.row_join, args)\n \n     def reshape(self, rows, cols):\n@@ -475,9 +480,13 @@ def row_join(self, other):\n         row\n         col_join\n         \"\"\"\n+        # Special case: both matrices have zero rows\n+        if self.rows == 0 and other.rows == 0:\n+            return self._new(0, self.cols + other.cols, [])\n+\n         # A null matrix can always be stacked (see  #10770)\n-        if self.cols == 0 and self.rows != other.rows:\n-            return self._new(other.rows, 0, []).row_join(other)\n+        if self.cols == 0:\n+            return self._new(self.rows, 0, []).row_join(other)\n \n         if self.rows != other.rows:\n             raise ShapeError(\n@@ -601,6 +610,12 @@ def vstack(cls, *args):\n             return cls._new()\n \n         kls = type(args[0])\n+\n+        # Check if any input matrix has zero columns\n+        if any(arg.cols == 0 for arg in args):\n+            total_rows = sum(arg.rows for arg in args)\n+            return kls.zeros(total_rows, 0)\n+\n         return reduce(kls.col_join, args)\n \n \n",
    "resolved": true
}