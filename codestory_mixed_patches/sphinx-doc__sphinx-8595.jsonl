{
    "instance_id": "sphinx-doc__sphinx-8595",
    "model_name_or_path": "codestory-mixed",
    "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex d85d79617..1def5ec96 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1017,7 +1017,12 @@ class ModuleDocumenter(Documenter):\n \n         try:\n             if not self.options.ignore_module_all:\n-                self.__all__ = inspect.getall(self.object)\n+                all_value = inspect.getall(self.object)\n+                if isinstance(all_value, list):\n+                    # Explicitly set __all__ to an empty list if it's empty\n+                    self.__all__ = all_value\n+                else:\n+                    self.__all__ = None\n         except AttributeError as exc:\n             # __all__ raises an error.\n             logger.warning(__('%s.__all__ raises an error. Ignored: %r'),\n@@ -1075,9 +1080,8 @@ class ModuleDocumenter(Documenter):\n         members = self.get_module_members()\n         if want_all:\n             if not self.__all__:\n-                # for implicit module members, check __module__ to avoid\n-                # documenting imported objects\n-                return True, list(members.values())\n+                # If __all__ is empty, skip all members\n+                return False, []\n             else:\n                 for member in members.values():\n                     if member.__name__ not in self.__all__:\n@@ -1092,9 +1096,9 @@ class ModuleDocumenter(Documenter):\n                     ret.append(members[name])\n                 else:\n                     logger.warning(__('missing attribute mentioned in :members: option: '\n-                                      'module %s, attribute %s') %\n-                                   (safe_getattr(self.object, '__name__', '???'), name),\n-                                   type='autodoc')\n+                                    'module %s, attribute %s') %\n+                                (safe_getattr(self.object, '__name__', '???'), name),\n+                                type='autodoc')\n             return False, ret\n \n     def sort_members(self, documenters: List[Tuple[\"Documenter\", bool]],\n",
    "resolved": true
}